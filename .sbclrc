;;-*- Mode: LISP; Syntax: COMMON-LISP; Base: 10 -*-
;;; ================================================================
;;; This is .sbclrc
;;;
;;; FILE-CREATED:
;;; <Timestamp: #{2009-09-06T08:18:52-04:00Z}#{09367} - by MON>
;;;
;;; :SEE (URL `https://github.com/mon-key/mon-dot-sbclrc')
;;; :SEE (URL `git://github.com/mon-key/mon-dot-sbclrc.git')
;;;
;;; ================================================================
;;; Copyright (C) - MON KEY - 2009-2011
;;; ================================================================


;;; CODE:

(in-package :common-lisp-user)

;; :NOTE On Slackware 13 our system needs:
;; LANG=en_US.UTF-8
;; shell> export LC_CTYPE=en_US.UTF-8
;;
;; sb-impl::*external-formats* sb-ext:
;; *external-formats* *external-formats*
;; (sb-impl::get-external-format SB-IMPL::*DEFAULT-EXTERNAL-FORMAT*)
#+sbcl (unless (eq sb-impl::*default-external-format* :UTF-8)
         (setf sb-impl::*default-external-format* :UTF-8))

(pushnew :IS-MON cl:*features*)

;; #+sbcl (require :asdf)
#+sbcl (require :sb-posix)

;; :NOTE SBCL `*core-pathname*', `*runtime-pathname*'

;;; ==============================
;; :FOLLOWING added per the quicklisp-beta 2010100700
;;; The following lines added by ql:add-to-init-file:
;;; To load ql systems, use (ql:load-system "system-name")

;;; The following lines added by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames "quicklisp/setup.lisp"
                                       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

;; asdf:*output-translations-parameter*
;; (setf asdf::*output-translations*
;; (asdf:clear-output-translations)
;; asdf::*user-cache*

;;; for line-edit
;;; Check for --no-linedit command-line option.
(if (member "--no-linedit" sb-ext:*posix-argv* :test 'equal)
    (setf sb-ext:*posix-argv*
	  (remove "--no-linedit" sb-ext:*posix-argv* :test 'equal))
    (when (interactive-stream-p *terminal-io*)
      ;; (setf (asdf::output-translations)  (asdf:clear-output-translations)
      ;; (set  (sb-posix:setenv  "ASDF_OUTPUT_TRANSLATIONS=" )
      (require :sb-aclrepl)
      (require :linedit)
      (funcall (intern "INSTALL-REPL" :linedit) :wrap-current t)))

(defun %%env-local-code-path (&optional (environmental-variable "CL_MON_CODE"))
  "ENVIRONMENTAL-VARIABLE is string identifying a variable in the system environment.
Its values names a directory in native namestring form.
If a trailing #\\/ is not present, one is concatentated to form a directory namestring.
The contents of this directory should contain site local lisp source code.
Default is \"CL_MON_CODE\".
An error is signaled if ENVIRONMENTAL-VARIABLE is not present in the current process environment.
An error is signaled if ENVIRONMENTAL-VARIABLE does not name an existing directory."
  (declare (string environmental-variable))
  (let ((env-val (sb-posix:getenv (string-upcase environmental-variable))))
    (unless env-val
      (error "arg ENVIRONMENTAL-VARIABLE not in current process environment, got: ~S"
             environmental-variable))
    (setf env-val
          (pathname
           (case (char env-val (1- (length env-val)))
             (#\/ env-val)
             (t  (concatenate 'string env-val '(#\/))))))
    (let ((probe-exists (probe-file env-val)))
      (unless probe-exists
        (error "arg ENVIRONMENTAL-VARIABLE does not designate an existing file or directory, got: ~S"
               env-val))
      (unless (equal (pathname-directory probe-exists)
                     (pathname-directory env-val))
        (error "arg ENVIRONMENTAL-VARIABLE has funny directory specification, got: ~S ~S"
               probe-exists env-val))
      probe-exists)))

;;; ==============================
;; nsub-rel-abs
;; "Destructively modify PATH-THING with `cl:nsubstitute' swapping
;; occurences of :absolute with :relative."
;;
;; mk-path-w-name-type-wild
;;  "Return a pathname as if by cl:make-pathname with value of
;; :directory comprised of DIR-PIECES.  The argument for both the :name
;; and :type keys is :wild."
;;
;; nconc-wild-inferiors
;;   "Destructively modify DIR-PIECES returning a list of
;; `cl:pathname-directory' components comprised of with the last elt as
;;  :WILD-INFERIORS."
;;
;; env-local-code-path
;;
;; imp-version-os-arch-string
;; "Return a string with the form:
;;   "<LISP-IMPLEMENTATION-TYPE>-<LISP-IMPLEMENTATION-VERSION>-<OS>-<PROC>"
;;  The value of <LISP-IMPLEMENTATION-TYPE> and <LISP-IMPLEMENTATION-VERSION> are as per
;;  `cl:lisp-implementation-type' and `lisp-implementation-version' respectively.
;; "Convert LOGICAL-DIR to a partial logical namestring.
;;   "MON" => "MON;**;*.*",  "QL"  => "QL;**;*.*"
;;   ""    => ";**;*.*", nil   => "**;*.*""
;;
;; %%build-base-fasl-logical-pathname-translations
;;   "Return a list for use with setf of cl:logical-pathname-translations.
;; Returned translations point into the default asdf fasl cache as per the
;; environmental variable "XDG_CACHE_HOME" and `asdf::*output-translations*'.
;; :NOTE This primary use case for this function is for initialization of
;; logical-pathname-translations independently of ASDF and Quicklisp.
;; Keywords LOGICAL-LOCAL-CODE-HOST and LOGICAL-QL-HOST are strings to use as
;; directory designator when constructing a translations list for use with
;; `cl:logical-pathname-translations'.
;; LOGICAL-QL-HOST defaults to "QL". The translations associated with it will
;; correspond to some Quicklisp path beneath ~/.cache/common-lisp/
;; LOGICAL-LOCAL-CODE-HOST defaults to "MON".
;; The translations associated with it will correspond to paths beneath
;; ENV-LOCAL-CODE-VAR.
;; Keywords SYSTEM-OS and SYSTEM-PROC are a symbol/keywords to search for in
;; `cl:*features*'.
;; SYSTEM-OS identifies the system operating system. Default is :LINUX
;; SYSTEM-PROC identifies the system processer type. Default is :X86
;; :EXAMPLE
;;
;;  (%%build-base-fasl-logical-pathname-translations
;;   :logical-local-directory "MON"
;;   :logical-ql-directory     "QL"
;;   :env-local-code-var      "CL_MON_CODE")
;;
;;  (setf (logical-pathname-translations "BASE-FASL")
;;        (%%build-base-fasl-logical-pathname-translations
;;         :logical-local-directory "MON"
;;         :logical-ql-directory    "QL"
;;         :env-local-code-var      "CL_MON_CODE"))
;;
;;  (translate-logical-pathname "BASE-FASL:")
;;  (translate-logical-pathname "BASE-FASL:**;*.*")
;;  (translate-logical-pathname "BASE-FASL:MON;")
;;  (translate-logical-pathname "BASE-FASL:MON;**;*.*")
;;  (translate-logical-pathname "BASE-FASL:QL;**;*.*")"
;;
(defun %%build-base-fasl-logical-pathname-translations (&key (logical-local-directory "MON")
                                                             (logical-ql-directory    "QL")
                                                             (env-local-code-var      "CL_MON_CODE")
                                                             (system-os               :LINUX)
                                                             (system-proc             :X86))
  (declare (string logical-local-directory logical-ql-directory  env-local-code-var)
           ((or symbol keyword) system-os system-proc)
           (optimize (speed 3)))
  (labels ((dir-parts (pathname-or-namestring)
             (declare ((or string pathname) pathname-or-namestring))
             (pathname-directory pathname-or-namestring))
           (nsub-rel-abs (path-thing)
             (declare ((or string pathname) path-thing))
             (nsubstitute :relative :absolute (dir-parts path-thing)))
           (nconc-wild-inferiors (dir-pieces)
             (let ((wild-inferirors (list :wild-inferiors)))
               (nconc dir-pieces wild-inferirors)))
           (mk-path-w-name-type-wild (dir-pieces)
             (make-pathname :directory dir-pieces :name :wild :type :wild))
           (imp-version-os-arch-string ()
             (format nil "~(~A-~A-~A-~A~)"
                     (lisp-implementation-type)
                     (lisp-implementation-version)
                     (car (member system-os   *features*))
                     (car (member system-proc *features*))))
           (partial-logical-namestring (logical-dir)
             (declare ((or string null) logical-dir))
             (let ((tmplt ";**;*.*"))
               (cond ((null logical-dir)           (string-left-trim (string #\;) tmplt))
                     ((zerop (length logical-dir)) tmplt)
                     (t                            (concatenate 'string (string-upcase logical-dir) tmplt)))))
           (map-partials-w-paths  (logical-dirs pathnames)
             (mapcar #'(lambda (partial path)
                         (list (partial-logical-namestring partial) path))
                     logical-dirs pathnames)))
    (let* ((cl-mon-code-env        (%%env-local-code-path env-local-code-var))
           (cache-impl-and-version (merge-pathnames
                                    (make-pathname :directory (list :relative (imp-version-os-arch-string)))
                                    (merge-pathnames
                                     (make-pathname :directory (list :relative ".cache" "common-lisp"))
                                     (user-homedir-pathname))))
           (cl-mon-code-dir        (merge-pathnames
                                    (mk-path-w-name-type-wild (nconc-wild-inferiors (nsub-rel-abs cl-mon-code-env)))
                                    cache-impl-and-version))
           (cache-home            (merge-pathnames
                                   (make-pathname :directory (nsub-rel-abs (user-homedir-pathname)))
                                   cache-impl-and-version))
           (cache-ql-wilden       (merge-pathnames
                                   (mk-path-w-name-type-wild (nconc-wild-inferiors (nsub-rel-abs "quicklisp/dists/quicklisp/software/")))
                                   cache-home))
           (cache-home-wilden     (mk-path-w-name-type-wild (nconc-wild-inferiors (dir-parts cache-home)))))
      (map-partials-w-paths
       (list logical-local-directory logical-ql-directory  ""  nil)
       (list cl-mon-code-dir cache-ql-wilden cache-home-wilden cache-home-wilden)))))

;; (%%build-base-fasl-logical-pathname-translations)

(defun %%map-wild-logicals (&rest wild-logical-specs)
  (flet ((wild-logical-components (trans-list)
           (destructuring-bind (target-logical-pathname trans-logical-pathname &optional inject-component) trans-list
             (declare (string target-logical-pathname)
                      ((or string pathname) trans-logical-pathname)
                      ((or string null) inject-component))
             (let ((maybe-injected-wild-inferiors (or (and inject-component
                                                           (list inject-component :wild-inferiors))
                                                      (list :wild-inferiors))))
               (list target-logical-pathname
                     (namestring
                      (make-pathname :directory (nconc
                                                 (pathname-directory (translate-logical-pathname (pathname trans-logical-pathname)))
                                                 maybe-injected-wild-inferiors)
                                     :name :wild
                                     :type :wild)))))))
    (map 'list #'wild-logical-components wild-logical-specs)))

(setf (logical-pathname-translations "BASE-FASL")
      (%%build-base-fasl-logical-pathname-translations
       :logical-local-directory "MON"
       :logical-ql-directory    "QL"
       :env-local-code-var      "CL_MON_CODE"))
;;
;; (translate-logical-pathname "BASE-FASL:MON;")
;; (translate-logical-pathname "BASE-FASL:QL;")
;; (translate-logical-pathname "BASE-FASL:")

(setf (logical-pathname-translations  "FASL" )
      (nconc
       (%%map-wild-logicals
        '("MON-SYSTEMS;**;*.*"  "BASE-FASL:MON;" "mon-systems")
        '("DBC-SPECIFIC;**;*.*" "BASE-FASL:MON;" "dbc-specific")
        '("UNICLY;**;*.*"       "BASE-FASL:MON;" "unicly")
        '("CLIME;**;*.*"        "BASE-FASL:MON;" "clime")
        '("CL-BMP;**;*.*"       "BASE-FASL:MON;" "cl-bmp")
        '("IMAGE-OPS;**;*.*"    "BASE-FASL:MON;" "image-ops")
        '("TIFF4CL;**;*.*"      "BASE-FASL:MON;" "tiff4cl-FORK")
        '("FSDB;**;*.*"         "BASE-FASL:MON;" "fsdb-FORK")
        '("LANGUTILS;**;*.*"    "BASE-FASL:MON;" "langutils-FORK")
        '("QL;**;*.*"           "BASE-FASL:QL;")
        '("QUICKLISP;**;*.*"    "BASE-FASL:QL;"))
       '(("**;*.*"              "BASE-FASL:**;*.*")
         (";**;*.*"             "BASE-FASL:;**;*.*"))))
;;
;; (translate-logical-pathname "FASL:mon-systems;")
;; (translate-logical-pathname "FASL:mon-systems;bubba;bubba2")
;; (translate-logical-pathname "FASL:dbc-specific;dbc-classes;")
;; (translate-logical-pathname "FASL:unicly;")
;; (translate-logical-pathname "FASL:unicly;tests;")
;; (translate-logical-pathname "FASL:clime;")
;; (translate-logical-pathname "FASL:image-ops;")
;; (translate-logical-pathname "FASL:QUICKLISP;")
;; (translate-logical-pathname "FASL:")
;; (translate-logical-pathname "FASL:;")
;; (translate-logical-pathname "FASL:bubba;")
;; (translate-logical-pathname "FASL:;bubba;")

(let ((local-wild
       (make-pathname
        :directory (nconc (pathname-directory (%%env-local-code-path)) (list :wild-inferiors))
        :name :wild
        :type :wild)))
  (setf (logical-pathname-translations "BASE-MON")
        `((";**;*.*" ,local-wild)
          ("**;*.*" ,local-wild))))

(setf (logical-pathname-translations "MON")
      (%%map-wild-logicals
       '("MON-SYSTEMS;**;*.*"  "BASE-MON:" "mon-systems")
       '("DBC-SPECIFIC;**;*.*" "BASE-MON:" "dbc-specific")
       '("UNICLY;**;*.*"       "BASE-MON:" "unicly")
       '("CLIME;**;*.*"        "BASE-MON:" "clime")
       '("CL-BMP;**;*.*"       "BASE-MON:" "cl-bmp")       
       '("IMAGE-OPS;**;*.*"    "BASE-MON:" "image-ops")
       '("TIFF4CL;**;*.*"      "BASE-MON:" "tiff4cl-FORK")
       '("FSDB;**;*.*"         "BASE-MON:" "fsdb-FORK")
       '("LANGUTILS;**;*.*"    "BASE-MON:" "langutils-FORK")
       '(";**;*.*"             "BASE-MON:")
       '("**;*.*"              "BASE-MON:")))

;; (%%map-wild-logicals
;;  '("IMAGE-OPS;**;*.*"    "BASE-MON;" "image-ops"))
;;
;; (logical-pathname-translations "MON")
;; (translate-logical-pathname "MON:mon-systems;")
;; (translate-logical-pathname "MON:mon-systems;bubba;")
;; (translate-logical-pathname "MON:unicly;")
;; (translate-logical-pathname "MON:image-ops;")
;; (translate-logical-pathname "MON:clime;")
;; (translate-logical-pathname "MON:cl-bmp;")

(loop
   for logical in (list "MON:mon-slime-extend;"
                        "MON:langutils-FORK;"
                        "MON:fsdb-FORK;"
                        "MON:tiff4cl-FORK"
                        "MON:clime;"
                        "MON:image-ops;"
                        "MON:cl-bmp;"
                        "MON:unicly;" 
                        "MON:dbc-specific;"
                        "MON:mon-systems;")
   for transpath = (translate-logical-pathname logical)
   unless (member transpath asdf:*central-registry*
                  :test #'(lambda (namex namey)
                            (string= (directory-namestring namex)
                                     (directory-namestring namey))))
   do (and (probe-file transpath)
	   (push transpath asdf:*central-registry*))
   finally (return asdf:*central-registry*))

#+quicklisp
(defun mon-load-systems (systems)
  (ql:quickload systems :verbose t :explain t))

;; ,----
;; | #lisp 2011-08-13
;; | <p_l|backup> (mapcar #'ql-dist:ensure-installed (ql:system-list)) 
;; |               ;; For when a lisper goes away from internet :)
;; `----

;;; ==============================
;;; .sbclrc ends here
;;; EOF
